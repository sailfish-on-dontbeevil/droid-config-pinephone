# -------- xpolicy.conf --------------------------------------------------------
#
# Files are read in following order,
# 1) xpolicy.conf
# 2) xpolicy.conf.d/*.conf, in descending order
#
# Variables can be defined anywhere, and they affect all the conf files. Variables
# are updated if same variable is defined later on (for example variables in
# xpolicy.conf.d/xvars.conf are applied most likely latest and are the active
# ones). Variables can be used to replace any string configuration value
# (NOT match types, etc.). For example following stream definition is valid:
#
# [stream]
# property = $property_name@equals:$property_value
# group    = $group_name
#
# or for context definition following property action is valid:
# set-property = sink-name@equals:$sink, property:$string, value@constant:$value
#
# Other sections than [variable] can also be defined in any conf file, and already
# defined ones will be overridden by later definition.
#


# -------- Variable section ----------------------------------------------------

# Defaults. To override define variables with new values
# in xpolicy.conf.d directory (for example xpolicy.conf.d/xvars.conf).
[variable]
sink_port_change_delay  = delayed_port_change
delay_time              = 150
card                    = alsa_card.0
card_profile_default    = HiFi
card_profile_voicecall  = "Voice Call"
dev_sink                = alsa_output.0.HiFi___ucm0001.hw_PinePhonePro__sink
sink_headset            = "[Out] Headphones"
sink_speaker            = "[Out] Speaker"
sink_earpiece           = "[Out] Earpiece"
dev_source              = alsa_input.0.HiFi___ucm0001.hw_PinePhonePro__source
source_headset          = "[In] Headset"
source_builtin_mic      = "[In] Mic"


# -------- Group section -------------------------------------------------------

[group]
name   = othermedia
flags  = route_audio, limit_volume, cork_stream

[group]
name   = idle
flags  = nopolicy
sink   = sink.null
source = sink.null.monitor

[group]
name   = background
flags  = limit_volume, cork_stream
sink   = $dev_sink
source = $dev_source

[group]
name   = systemsound
flags  = set_sink, limit_volume, cork_stream, mute_by_route
sink   = $dev_sink

[group]
name   = btnotify
flags  = set_sink, limit_volume, cork_stream, mute_by_route, dynamic_sink
sink   = startswith:"bluez_sink"

[group]
name   = feedbacksound
flags  = set_sink, limit_volume, cork_stream, mute_by_route
sink   = $dev_sink

[group]
name   = inputsound
flags  = set_sink, limit_volume, cork_stream, mute_by_route
sink   = $dev_sink

[group]
name   = event
flags  = set_sink, limit_volume, cork_stream, mute_by_route
sink   = $dev_sink

[group]
name   = alarm
flags  = set_sink, limit_volume, mute_by_route, cork_stream, media_notify
sink   = $dev_sink

[group]
name   = flash
flags  = limit_volume, cork_stream

[group]
name   = player
flags  = route_audio, limit_volume, cork_stream

[group]
name   = game
flags  = route_audio, limit_volume, cork_stream

[group]
name   = voiceui
flags  = set_sink, limit_volume, cork_stream
sink   = $dev_sink

[group]
name   = ringtone
flags  = set_sink, limit_volume, mute_by_route, cork_stream, media_notify
sink   = $dev_sink

[group]
name   = camera
flags  = set_sink, set_source, limit_volume, cork_stream
sink   = $dev_sink
source = $dev_source

[group]
name   = videoeditor
flags  = route_audio, limit_volume, cork_stream

[group]
name   = ipcall
flags  = set_sink, set_source, limit_volume, cork_stream
sink   = $dev_sink
source = $dev_source

[group]
name   = call
flags  = set_sink, set_source
sink   = $dev_sink
source = $dev_source

[group]
name   = navigator
flags  = set_sink, set_source
sink   = $dev_sink
source = $dev_source

[group]
name   = cstone
flags  = route_audio, set_source, limit_volume

[group]
name   = alwayson
flags  = set_sink, limit_volume, cork_stream
sink   = $dev_sink

[group]
name   = nonsilent
flags  = set_sink, limit_volume, cork_stream
sink   = $dev_sink

[group]
name   = internal
flags  = nopolicy
sink   = sink.null
source = source.null.monitor

[group]
name   = outgoing
flags  = route_audio

[group]
name   = incoming
flags  = route_audio

[group]
name   = alien
flags  = route_audio, limit_volume, mute_by_route

[group]
name   = aliencall
flags  = route_audio, limit_volume, mute_by_route

[group]
name   = probesink
flags  = set_sink, limit_volume, cork_stream
sink   = $dev_sink

# -------- Card section --------------------------------------------------------

# included from bluez5.conf and bluez5_earpiece.conf

# -------- Device section ------------------------------------------------------

[device]
type = tvoutandbta2dp
sink = startswith:"bluez_sink"

[device]
type  = ihfandheadset
sink  = equals:$dev_sink
ports = $dev_sink:$sink_speaker
flags = $sink_port_change_delay
delay = $delay_time

[device]
type  = ihfandheadset
source= equals:$dev_source
ports = $dev_source:$source_headset

[device]
type  = ihfandheadphone
sink  = equals:$dev_sink
ports = $dev_sink:$sink_speaker
flags = $sink_port_change_delay
delay = $delay_time

[device]
type  = ihfandlineout
sink  = equals:$dev_sink
ports = $dev_sink:$sink_speaker
flags = $sink_port_change_delay
delay = $delay_time

[device]
type  = bta2dp
sink  = startswith:"bluez_sink"
ports = $dev_sink:$sink_speaker
flags = disable_notify

[device]
type  = bta2dpforalien
sink  = startswith:"bluez_sink"
ports = $dev_sink:$sink_speaker
flags = disable_notify

[device]
type  = bthsp
sink  = startswith:"sco_sink"
ports = $dev_sink:$sink_speaker
flags = disable_notify, refresh_always

[device]
type   = bthsp
source = startswith:"sco_source"
flags  = disable_notify, refresh_always

[device]
type  = bthspforcall
sink  = startswith:"sco_sink"
flags = disable_notify, refresh_always, delayed_port_change

[device]
type   = bthspforcall
source = startswith:"sco_source"
flags  = disable_notify, refresh_always

[device]
type  = bthspforalien
sink  = startswith:"sco_sink"
flags = disable_notify, refresh_always, delayed_port_change

[device]
type   = bthspforalien
source = startswith:"sco_source"
flags  = disable_notify, refresh_always

[device]
type  = bthfp
sink  = startswith:"sco_sink"
ports = $dev_sink:$sink_speaker
flags = disable_notify, refresh_always

[device]
type   = bthfp
source = startswith:"sco_source"
flags  = disable_notify, refresh_always

[device]
type  = bthfpforcall
sink  = startswith:"sco_sink"
ports = $dev_sink:$sink_speaker
flags = disable_notify, refresh_always, delayed_port_change

[device]
type   = bthfpforcall
source = startswith:"sco_source"
flags  = disable_notify, refresh_always

[device]
type  = bthfpforalien
sink  = startswith:"sco_sink"
ports = $dev_sink:$sink_speaker
flags = disable_notify, refresh_always, delayed_port_change

[device]
type   = bthfpforalien
source = startswith:"sco_source"
flags  = disable_notify, refresh_always

[device]
type   = headset
source = equals:$dev_source
ports  = $dev_source:$source_headset
flags  = disable_notify, refresh_always

[device]
type  = headset
sink  = equals:$dev_sink
ports = $dev_sink:$sink_headset
flags = disable_notify, refresh_always, $sink_port_change_delay
delay = $delay_time

[device]
type  = headsetforcall
sink  = equals:$dev_sink
ports = $dev_sink:$sink_headset
flags = refresh_always, delayed_port_change
delay = 200

[device]
type   = headsetforcall
source = equals:$dev_source
ports  = $dev_source:$source_headset

[device]
type  = headsetforalien
sink  = equals:$dev_sink
ports = $dev_sink:$sink_headset
flags = refresh_always

[device]
type   = headsetforalien
source = equals:$dev_source
ports  = $dev_source:$source_headset

[device]
type  = headphone
sink  = equals:$dev_sink
ports = $dev_sink:$sink_headset
flags = disable_notify, refresh_always, $sink_port_change_delay
delay = $delay_time

[device]
type  = headphoneforcall
sink  = equals:$dev_sink
ports = $dev_sink:$sink_headset
flags = refresh_always, delayed_port_change
delay = 200

[device]
type  = headphoneforalien
sink  = equals:$dev_sink
ports = $dev_sink:$sink_headset
flags = refresh_always

[device]
type  = lineout
sink  = equals:$dev_sink
ports = $dev_sink:$sink_headset
flags = disable_notify, refresh_always, $sink_port_change_delay
delay = $delay_time

[device]
type  = lineoutforcall
sink  = equals:$dev_sink
ports = $dev_sink:$sink_headset
flags = refresh_always, delayed_port_change
delay = 200

[device]
type  = lineoutforalien
sink  = equals:$dev_sink
ports = $dev_sink:$sink_headset
flags = refresh_always

[device]
type  = ihfandtvout
sink  = equals:$dev_sink
ports = $dev_sink:$sink_speaker

[device]
type  = tvout
sink  = equals:$dev_sink
ports = $dev_sink:$sink_headset

[device]
type   = microphone
source = equals:$dev_source
ports  = $dev_source:$source_builtin_mic

[device]
type   = backmicrophone
source = equals:$dev_source
ports  = $dev_source:$source_builtin_mic

[device]
type  = ihf
sink  = equals:$dev_sink
ports = $dev_sink:$sink_speaker
flags = refresh_always, $sink_port_change_delay
delay = $delay_time

[device]
type  = ihfforcall
sink  = equals:$dev_sink
ports = $dev_sink:$sink_speaker
flags = refresh_always

[device]
type  = ihfforalien
sink  = equals:$dev_sink
ports = $dev_sink:$sink_speaker
flags = refresh_always

[device]
type   = voicecall
source = equals:$dev_source
ports  = $dev_source:$source_builtin_mic

[device]
type = null
sink = equals:sink.null

# -------- Stream section ------------------------------------------------------

[stream]
exe      = gst-launch-0.10
group    = player

[stream]
exe      = gst-launch-1.0
group    = player

[stream]
exe      = pacat
group    = player

# Ignore pulsesink probe from gstreamer pulsesink
# when a2dp is active, route probing to a2dp headset
[stream]
property = media.name@equals:"pulsesink probe"
sink     = bta2dp
group    = btnotify

# Ignore pulsesink probe from gstreamer pulsesink
[stream]
property = media.name@equals:"pulsesink probe"
group    = probesink

[stream]
exe      = ngfd
property = media.name@equals:"system-event"
sink     = bta2dp
group    = btnotify

[stream]
exe      = ngfd
property = event.id@equals:"message-new-email"
sink     = bta2dp
group    = btnotify

[stream]
exe      = ngfd
property = media.name@equals:"battery-event"
sink     = bta2dp
group    = btnotify

[stream]
property = application.process.arg0@equals:"/usr/bin/maliit-server"
group    = feedbacksound

[stream]
property = event.id@equals:"phone-incoming-call"
group    = ringtone

[stream]
property = event.id@equals:"alarm-clock-elapsed"
group    = alarm

[stream]
property = event.id@equals:"message-new-email"
group    = event

[stream]
exe      = ngfd
property = event.id@equals:"event-in-call"
group    = alwayson

[stream]
exe      = ngfd
property = media.name@equals:"event-in-call"
group    = alwayson

[stream]
exe      = ngfd
property = media.name@equals:"camera-event"
group    = camera

[stream]
exe      = ngfd
property = media.name@equals:"feedback-event"
group    = feedbacksound

[stream]
exe      = ngfd
property = media.name@equals:"system-event"
group    = systemsound

[stream]
exe      = ngfd
property = media.name@equals:"battery-event"
group    = systemsound

[stream]
exe   = telepathy-stream-engine
group = call

[stream]
property = application.process.arg0@equals:"/usr/lib/telepathy/telepathy-stream-engine"
group    = call

[stream]
property = media.name@equals:"indtone"
group    = cstone

[stream]
property = media.name@equals:"dtmf"
group    = cstone

[stream]
property = media.name@equals:"notiftone"
group    = nonsilent

[stream]
exe   = qmafw-dbus-wrapper
group = player

[stream]
name     = "Virtual Stream for MainVolume Volume Control"
group    = internal

[stream]
name  = "output of sink."
group = internal

[stream]
name  = "input of source."
group = internal

# For routing to sink.primaryandbluez
[stream]
property = media.name@startswith:"Simultaneous output on"
group    = internal

# -------- Context rule section ------------------------------------------------

[context-rule]
variable     = call
value        = equals:outgoing
set-property = module-name@equals:module-policy-enforcement, property:"x-nemo.voicecall.status", value@constant:"active"

[context-rule]
variable     = call
value        = equals:active
set-property = module-name@equals:module-policy-enforcement, property:"x-nemo.voicecall.status", value@constant:"active"

[context-rule]
variable     = call
value        = equals:inactive
set-property = module-name@equals:module-policy-enforcement, property:"x-nemo.voicecall.status", value@constant:"inactive"

[context-rule]
variable     = call
value        = equals:voip
set-property = module-name@equals:module-policy-enforcement, property:"x-nemo.voicecall.status", value@constant:"voip"

[context-rule]
variable     = media_state
value        = matches:"^[^t].*"
set-property = module-name@equals:module-policy-enforcement, property:"x-nemo.media.state", value@copy-from-context

[context-rule]
variable     = emergency_call
value        = matches:".*"
set-property = module-name@equals:module-policy-enforcement, property:"x.emergency_call.state", value@copy-from-context
